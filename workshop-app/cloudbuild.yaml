# Sample cloudbuild.yaml that can containerize a npm app with JFrog Artifactory as a source of truth.
# NOTE: JFrog cloud builder image should exist. "cloudbuild.yaml"  to build JFrog cloud builder image exists one level up.

# In this directory, run the following command to build this builder.
# $ gcloud builds submit . --config=cloudbuild.yaml

substitutions:
  _JFROG_SERVER_NAME: <servername>.jfrog.io
  _JFROG_REPO_NAME: clouddays
  _JFROG_CLI_VERSION: 2.11.0
  _JFROG_USER: <user-name>

steps:
- name: 'gcr.io/cloud-builders/docker'
  entrypoint: 'bash'
  args: ['-c', 'docker login ${_JFROG_SERVER_NAME} -u ${_JFROG_USER} -p $$JFROG_ACCESS_TOKEN']
  dir: 'workshop-app'
  secretEnv: ['JFROG_ACCESS_TOKEN']
  
- name: '${_JFROG_SERVER_NAME}/${_JFROG_REPO_NAME}/jfrog-cli:${_JFROG_CLI_VERSION}'
  entrypoint: 'bash'
  args: ['-c', 'jfrog config add ${_JFROG_REPO_NAME} --artifactory-url=https://${_JFROG_SERVER_NAME}/artifactory --interactive=false --access-token=$$JFROG_ACCESS_TOKEN']
  env: ['TMPDIR=/workspace']
  dir: 'workshop-app'
  secretEnv: ['JFROG_ACCESS_TOKEN']

  # Configure npm repo
- name: '${_JFROG_SERVER_NAME}/${_JFROG_REPO_NAME}/jfrog-cli:${_JFROG_CLI_VERSION}'
  args: ['npmc', '--repo-resolve=clouddays-npm', '--repo-deploy=clouddays-npm','--server-id-resolve=${_JFROG_REPO_NAME}','--server-id-deploy=${_JFROG_REPO_NAME}']
  env: ['TMPDIR=/workspace']
  dir: 'workshop-app'
  secretEnv: ['JFROG_ACCESS_TOKEN']

# Build a sample npm project
- name: '${_JFROG_SERVER_NAME}/${_JFROG_REPO_NAME}/jfrog-cli:${_JFROG_CLI_VERSION}'
  args: ['npm', 'install', '--build-name=npm_build', '--build-number=2']
  env: ['TMPDIR=/workspace']
  dir: 'workshop-app'
  secretEnv: ['JFROG_ACCESS_TOKEN']

  # publish the sample npm project
- name: '${_JFROG_SERVER_NAME}/${_JFROG_REPO_NAME}/jfrog-cli:${_JFROG_CLI_VERSION}'
  args: ['rt', 'npm-publish', '--build-name=npm_build', '--build-number=2']
  env: ['TMPDIR=/workspace']
  dir: 'workshop-app'
  secretEnv: ['JFROG_ACCESS_TOKEN']

  # build-publish the sample npm project
- name: '${_JFROG_SERVER_NAME}/${_JFROG_REPO_NAME}/jfrog-cli:${_JFROG_CLI_VERSION}'
  args: ['rt', 'build-publish', 'npm_build', '2']
  env: ['TMPDIR=/workspace']
  dir: 'workshop-app'
  secretEnv: ['JFROG_ACCESS_TOKEN']

# Containerize npm app
- name: 'gcr.io/cloud-builders/docker'
  args:
  - 'build'
  - '--tag=${_JFROG_SERVER_NAME}/${_JFROG_REPO_NAME}/npm-app:${COMMIT_SHA}'
  - '.'
  dir: 'workshop-app'
  secretEnv: ['JFROG_ACCESS_TOKEN']

- name: 'gcr.io/cloud-builders/docker'
  entrypoint: 'bash'
  args: ['-c', 'docker login ${_JFROG_SERVER_NAME} -u ${_JFROG_USER} -p $$JFROG_ACCESS_TOKEN']
  dir: 'workshop-app'
  secretEnv: ['JFROG_ACCESS_TOKEN']
  
# Docker Push the image to artifactiry
- name: 'gcr.io/cloud-builders/docker'
  args: ['push', '${_JFROG_SERVER_NAME}/${_JFROG_REPO_NAME}/npm-app:${COMMIT_SHA}']
  env: ['TMPDIR=/workspace']
  dir: 'workshop-app'
  secretEnv: ['JFROG_ACCESS_TOKEN']
  
# Create release in Google Cloud Deploy
- name: gcr.io/google.com/cloudsdktool/cloud-sdk
  entrypoint: gcloud
  args: 
    [
      "beta", "deploy", "releases", "create", "rel-${SHORT_SHA}",
      "--delivery-pipeline", "clouddays-demo",
      "--region", "us-central1",
      "--annotations", "commitId=${REVISION_ID}",
      "--images", "npm-app=${_JFROG_SERVER_NAME}/${_JFROG_REPO_NAME}/npm-app:${COMMIT_SHA}",
      "--source", "workshop-app"
    ]

availableSecrets:
  secretManager:
  - versionName: projects/666191144225/secrets/jfrog-access-token/versions/1
    env: 'JFROG_ACCESS_TOKEN'
